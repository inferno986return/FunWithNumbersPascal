
Program Prototype_Maths_Game;

Var {Global Variables}

Number1:Integer; {This is the first number generated by the randomise function.}
Number2:Integer; {This is the second number generated by the randomise function.}
TrueAnswer:Integer; {This is the real answer which is calculated by the computer (meaning it is always correct).}
Answer:Integer; {This is the user's attempt at an answer, which is then compared to the TrueAnswer to find out if it's right or wrong.}
Score:Integer; {The user's score which can be anything between 0 and 10 which represents how many questions the user got right.}
Stop:Boolean; {When set to true the program ends}

Procedure Question;
{This function generates 2 numbers called Number1 and Number2. It then multiplies them together to and outputs to a variable called TrueAnswer.}

Begin
  Randomize; {The randomise function generates a random number between 1-10 by using the pseudorandom number generator.}
  Number1:=Random(1-10+1); {Here Number1 is being assigned a random integer between 1 and 10}
  Number2:=Random(1-10+1); {Here Number2 is being assigned a random integer between 1 and 10}
  TrueAnswer:=Number1 * Number2; {Here Number1 and Number2 are both being multiplied together and are being stored as the variable TrueAnswer}
End; {End Question}

Procedure CheckAnswer;

{This procedure checks the user's Answer and compares it to the TrueAnswer variable. Then using an if statement +1 is added to the user's score and the word correct appears on screen, else appears incorrect.}

Begin
  If TrueAnswer=Answer Then
  Begin
  Score := Score+1;
  writeln('Correct! :-)');
  End {End Correct part of if statement}
  Else
  writeln('Incorrect! :-(')
  End; {Ends CheckAnswer}

Procedure CalcScore;
{This procedure calucates the final score by checking the score variable and applying its value to a bunch of if statements.}

Begin

  If Score = 0 Then   {These if statements work by the process of elimination. Meaning that the Score variable is compared several times to ensure that the correct output appears, assuming it's 10 or less.}
   Begin              {If the Score variable more than 10 an error will appear.}
     writeln('Sorry got 0/10. Better luck next time :-)');
   End {End If for Score 0}
  Else
   Begin
     If Score = 1 Then
      Begin
       writeln('You got 1/10. You still need to work at multiplication more.');
      End {End If for Score 1}
     Else
       Begin
         If Score = 2 Then
           Begin
             writeln('You got 2/10. You most certainly need more practise!');
           End {End If for Score 2}
         Else
           Begin
             If Score = 3 Then
               Begin
                 writeln('You got 3/10. Try harder next time!');
               End {End If for Score 3}
             Else
               Begin
               If Score = 4 Then
                 Begin
                 writeln('You got 4/10. Almost half right!');
                 End {End If for Score 4}
               Else
                Begin
                  If Score = 5 Then
                    Begin
                     writeln('You got 5/10. That''s half right!');
                    End {End If for Score 5}
                  Else
                    If Score = 6 Then
                      Begin
                        writeln('You have got 6/10. That''s more than half');
                      End {End If for Score 6}
                    Else
                      Begin
                        If Score = 7 Then
                          Begin
                            writeln('You have got 7/10 Good Work!');
                          End {End If for Score 7}
                        Else
                          If Score = 8 Then
                            Begin
                              writeln('You have 8/10. Great work!');
                            End {End If for Score 8}
                       Else
                       If Score = 9 Then
                            Begin
                              writeln('You have 9/10. Excellent work!');
                             End {End If for Score 9}
                       Else
                       If Score = 10 Then
                          Begin
                             writeln('You have 10/10. Which is perfect!');
                          End {End If for Score 10}
                       Else
                         Begin
                          writeln('ERROR!!!: Error in If statement used to calculate score, value is not between 1 and 10!');
                          writeln('Score is actually' ,Score,'');
                         End; {End Error}

      End; {Ends Else Statement 0}
      End; {Ends Else Statement 1}
      End; {Ends Else Statement 2}
      End; {Ends Else Statement 3}
      End; {Ends Else Statement 4}
      End; {Ends Else Statement 5}
      End; {Ends Else Statement 6}
   {Ends extremely complicated if statement}


{Ends CalcScore}

Procedure EndProgram;
{This procedure changes the boolean flag called Stop to true and hence closes the program}
Begin
  Stop := True;
End; {End EndProgram}

Begin {The main procedure which hosts a menu option and displays the 10 questions.}

Stop := False; {This is the dummy value and ensures the program won't end prematurely}

  writeln('(C) Mercasoft Technologies'); {Displays "(C) Mercasoft Technologies".}
  writeln; {Displays a blank line.}
  writeln('Welcome to Fun With Numbers: Multiplication Edition!!!'); {Displays "Welcome to Fun With Numbers: Multiplication Edition!!!".}
  writeln; {Displays a blank line.}
  writeln('Press the enter key to begin.');
  readln; {Gets the user's input and then displays Tux}
  writeln;{Displays a blank line.}
  writeln;{Displays a blank line.}
  writeln('                                .:xxxxxxxx:. ');   {This writeln portion displays Tux the Linux penguin!}
  writeln('                             .xxxxxxxxxxxxxxxx.');
  writeln('                            :xxxxxxxxxxxxxxxxxxx:.');
  writeln('                           .xxxxxxxxxxxxxxxxxxxxxxx:');
  writeln('                          :xxxxxxxxxxxxxxxxxxxxxxxxx:');
  writeln('                          xxxxxxxxxxxxxxxxxxxxxxxxxxX:');
  writeln('                          xxx:::xxxxxxxx::::xxxxxxxxx:');
  writeln('                         .xx:   ::xxxxx:     :xxxxxxxx');
  writeln('                         :xx  x.  xxxx:  xx.  xxxxxxxx');
  writeln('                         :xx xxx  xxxx: xxxx  :xxxxxxx');
  writeln('                         .xx .xx  xxxx:. xx.  xxxxxxxx');
  writeln('                          xx ::::::xx:::::.   xxxxxxxx');
  writeln('                          xx:::::.::::.:::::::xxxxxxxx');
  writeln('                          :x"::::"::::":::::":xxxxxxxxx.');
  writeln('                          :xx.::::::::::::"   xxxxxxxxxx');
  writeln('                          :xx: "::::::::"     :xxxxxxxxxx.');
  writeln('                         .xx     "::::"        "xxxxxxxxxx.');
  writeln('                      .xxxx                     "xxxxxxxxx.');
  writeln('                     .xxxx                         "xxxxxxxxx.');
  writeln('                   .xxxxx:                          xxxxxxxxxx.');
  writeln('                  .xxxxx:"                          xxxxxxxxxxx.');
  writeln('                  .xxxxx:"                          xxxxxxxxxxx.');
  writeln('                 .xxxxxx:::.           .       ..:::_xxxxxxxxxxx:.');
  writeln('                .xxxxxxx""      ":::""            ""::xxxxxxxxxxxx.');
  writeln('                xxxxxx            :                  "::xxxxxxxxxxxx');
  writeln('               :xxxx:"            :                    "xxxxxxxxxxxx:');
  writeln('              .xxxxx              :                     ::xxxxxxxxxxxx');
  writeln('              xxxx:"                                    ::xxxxxxxxxxxx');
  writeln('              xxxx:"                                    ::xxxxxxxxxxxx');
  writeln('              xxxx               .                      ::xxxxxxxxxxxx.');
  writeln('          .:xxxxxx               :                      ::xxxxxxxxxxxx::');
  writeln('          xxxxxxxx               :                      ::xxxxxxxxxxxxx:');
  writeln('          xxxxxxxx               :                      ::xxxxxxxxxxxxx:');
  writeln('          ":xxxxxx               :                      ::xxxxxxxxxxxx:"');
  writeln('            .:. xx:.                                   .:xxxxxxxxxxxxx.');
  writeln('          ::::::."xx:.            :                  .:: xxxxxxxxxxx":');
  writeln('  .:::::::::::::::."xxxx.                            ::::"xxxxxxxx":::.');
  writeln('  ::::::::::::::::::."xxxxx                          :::::.".xx."::::::.');
  writeln('  ::::::::::::::::::::."xxxx:.                       :::::::.'':::::::::');
  writeln('  ":::::::::::::::::::::."xx:"                     ."::::::::::::::::::::..');
  writeln('    :::::::::::::::::::::."xx                    .:: :::::::::::::::::::::::');
  writeln('  .:::::::::::::::::::::::. xx               .::xxxx :::::::::::::::::::::::');
  writeln('  :::::::::::::::::::::::::."xxx..        .::xxxxxxx ::::::::::::::::::::"');
  writeln('  "::::::::::::::::::::::::: xxxxxxxxxxxxxxxxxxxxxxx :::::::::::::::::"');
  writeln('    "::::::::::::::::::::::: xxxxxxxxxxxxxxxxxxxxxxx :::::::::::::::"');
  writeln('        ":::::::::::::::::::_xxxxxx::"""::xxxxxxxxxx "::::::::::::"');
  writeln('             "":.::::::::::"                        `._"::::::""');
  writeln; {Displays a blank line.}
  writeln('May work on Linux!');
  writeln;{Displays a blank line.}
  writeln('*********************************************************************');
  writeln('*                                                                   *');
  writeln('* This game works by asking random multiplication questions from    *');
  writeln('* between the 1 to the 10 times table.                              *');
  writeln('*                                                                   *');
  writeln('* The game runs for 10 questions and once you have done all of them *');
  writeln('* total score appears!                                              *');
  writeln('*                                                                   *');
  writeln('* Try to get 10/10! :-)                                             *');
  writeln('*                                                                   *');
  writeln('*********************************************************************');
  writeln; {Displays a blank line.}
  writeln; {Displays a blank line.}
  Question; {Calls the procedure Question into the main program.}
  writeln('Question 1: What is',Number1,'X',Number2,'?');
  readln(Answer); {Saves the user's input as the variable Answer}
  writeln; {Displays a blank line.}
  CheckAnswer; {Calls the procedure CheckAnswer into the main program}
  writeln; {Displays a blank line.}
  Question; {Starts the next question}
  writeln('Question 2: What is',Number1,'X',Number2,'?');
  readln(Answer);
  writeln; {Displays a blank line.}
  CheckAnswer;
  writeln; {Displays a blank line.}
  Question;
  writeln('Question 3: What is',Number1,'X',Number2,'?');
  readln(Answer);
  writeln; {Displays a blank line.}
  CheckAnswer;
  writeln; {Displays a blank line.}
  Question;
  writeln('Question 4: What is',Number1,'X',Number2,'?');
  readln(Answer);
  writeln; {Displays a blank line.}
  CheckAnswer;
  writeln; {Displays a blank line.}
  Question;
  writeln('Question 5: What is',Number1,'X',Number2,'?');
  readln(Answer);
  writeln; {Displays a blank line.}
  CheckAnswer;
  writeln; {Displays a blank line.}
  Question;
  writeln('Question 6: What is',Number1,'X',Number2,'?');
  readln(Answer);
  writeln; {Displays a blank line.}
  CheckAnswer;
  writeln; {Displays a blank line.}
  Question;
  writeln('Question 7: What is',Number1,'X',Number2,'?');
  readln(Answer);
  writeln; {Displays a blank line.}
  CheckAnswer;
  writeln; {Displays a blank line.}
  Question;
  writeln('Question 8: What is',Number1,'X',Number2,'?');
  readln(Answer);
  writeln; {Displays a blank line.}
  CheckAnswer;
  writeln; {Displays a blank line.}
  Question;
  writeln('Question 9: What is',Number1,'X',Number2,'?');
  readln(Answer);
  writeln; {Displays a blank line.}
  CheckAnswer;
  writeln; {Displays a blank line.}
  Question;
  writeln('Question 10: What is',Number1,'X',Number2,'?');
  readln(Answer);
  writeln; {Displays a blank line.}
  CheckAnswer;
  writeln; {Displays a blank line.}
  writeln('Let''s see what your final score is!'); {Displays "Let's see what your final score is".}
  CalcScore;
  readln; {This ReadLn feature is only required for the Windows Command Prompt application and wouldn't be required in various other Terminal programs.}
  {It works by stopping the program and letting it wait so the user see their score.}
  While Stop = False Do
  EndProgram;
  
End. {End Prototype Maths Game}

{
These questions work by first outputting the sentence of "Question X : What is Y multiplied by Z?"
X being the question number, Y being Number1 and Z being Number2.
Then an integer is inputted by user into the program and stored as a variable called Answer
Next, the Answer variable is compared in the Answer procedure.
Lastly, the Answer variable is compared and tells the user whether it's correct or incorrect.
This is done 10 times for each question!
}

